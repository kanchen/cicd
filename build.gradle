import org.apache.tools.ant.filters.*

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.1.RELEASE")
        classpath("se.transmode.gradle:gradle-docker:1.2")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2.1")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

jar {
    baseName = 'CicdSelfService'
    version =  '0.1.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("junit:junit")
}

group = 'demouser'

apply plugin: 'docker'

task buildDocker(type: Docker, dependsOn: build) {
  push = false
  applicationName = jar.baseName
  dockerfile = file('src/main/docker/Dockerfile')
  doFirst {
    copy {
      from jar
      into stageDir
    }
  }
}

apply plugin: "org.sonarqube"
sonarqube {
  properties {
    property "sonar.projectName", "CicdSelfService"
    property "sonar.projectKey", "org.sonarqube:CicdSelfService"
    property "sonar.projectVersion",jar.baseName

  }
}

apply plugin: 'findbugs'
findbugs {
    reportsDir = file("$project.buildDir/findbugs")
    effort = "max"
    reportLevel = "high"
    ignoreFailures = "false"
}

test {
    reports {
        junitXml.enabled = true
        //junitXml.enabled = false
        html.enabled = true
    }               
}

task testReport(type: TestReport) {
  destinationDir = file("$project.buildDir/reports/allTests")
  // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}

