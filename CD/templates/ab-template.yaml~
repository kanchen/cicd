kind: Template
apiVersion: v1
labels:
  template: ab-deployment
  group: ab-deployment
metadata:
  annotations:
    description: A/B Deployments
    tags: ab-deployment
  name: ab-deployment
message: The A/B Deployment Template
parameters:
- description: The Docker Registry.
  displayName: Docker Registry
  name: DOCKER_REGISTRY
  required: true
  value: docker.io/kchen
- description: The application name.
  displayName: Application Name
  name: APP_NAME
  required: true
  value: hola
- description: The Service Port.
  displayName: Service Port
  value: "9000"
  name: PORT
  required: true
- description: The Memory Limit.
  displayName: Memory Limit
  value: 512Mi
  name: MEMORY_LIMIT
  required: true
- description: The Service Liveness Path.
  displayName: Service Liveness Path
  value: /hola-mundo
  name: LIVENESS_PATH
  required: true
- description: The Service Readiness Path.
  displayName: Service Readiness Path
  value: /hola-mundo
  name: READINESS_PATH
  required: true
objects:
#Application Route
- apiVersion: v1
  kind: Route
  metadata:
    name: "ab-${APP_NAME}-rt"
  spec:
    to:
      kind: Service
      name: "a-${APP_NAME}-svc"
      weight: "100"
    alternateBackends:
    - kind: Service
      name: "b-${APP_NAME}-svt"
      weight: "0"

#Application A Deployment
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "a-${APP_NAME}-dc"
  spec:
    replicas: 1
    selector:
      name: "a-${APP_NAME}-dc"
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          name: "a-${APP_NAME}-dc"
      spec:
        containers:
        - name: "a-${APP_NAME}"
          image: "a-${APP_NAME}-is"
          ports:
          - containerPort: ${PORT}
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: ${LIVENESS_PATH}
              port: ${PORT}
            initialDelaySeconds: 30
            timeoutSeconds: 3
          readinessProbe:
            httpGet:
              path: ${READINESS_PATH}
              port: ${PORT}
            initialDelaySeconds: 3
            timeoutSeconds: 1
            periodSeconds: 2
            seccessThreashold: 1
            failureThreashold: 5
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "a-${APP_NAME}"
        from:
          kind: ImageStream
          name: "a-${APP_NAME}-is"

#Application Service    
- kind: Service
  apiVersion: v1
  metadata:
    name: "a-${APP_NAME}-svc"
  spec:
    ports:
    - name: web
      port: ${PORT}
      targetPort: ${PORT}
    selector:
      name: "a-${APP_NAME}-dc"
#Route
- kind: Route
  apiVersion: v1
  metadata:
    name: "a-${APP_NAME}-rt"
  spec:
    to:
      kind: Service
      name: "a-${APP_NAME}-svc"

- kind: ImageStream
  apiVersion: v1
  metadata:
    name: "a-${APP_NAME}-is"
  spec:
    dockerImageRepository: "${DOCKER_REGISTRY}"
#    tags:
#    - from:
#      kind: dockerImageRepository
#      name: "${DOCKER_REGISTRY}/${APP_NAME}:0.0"
    importPolicy:
      insecure: true
    name: latest

- kind: ImageStream
  apiVersion: v1
  metadata:
    name: "b-${APP_NAME}-is"
  spec:
    dockerImageRepository: "${DOCKER_REGISTRY}"
#    tags:
#    - from:
#      kind: dockerImageRepository
#      name: "${DOCKER_REGISTRY}/${APP_NAME}:0.0"
    importPolicy:
      insecure: true
    name: latest

#Application B Deployment
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "b-${APP_NAME}-dc"
  spec:
    replicas: 1
    selector:
      name: "b-${APP_NAME}-dc"
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          name: "b-${APP_NAME}-dc"
      spec:
        containers:
        - name: "b-${APP_NAME}"
          image: "b-${APP_NAME}-is"
          ports:
          - containerPort: ${PORT}
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: ${LIVENESS_PATH}
              port: ${PORT}
            initialDelaySeconds: 30
            timeoutSeconds: 3
          readinessProbe:
            httpGet:
              path: ${READINESS_PATH}
              port: ${PORT}
            initialDelaySeconds: 3
            timeoutSeconds: 1
            periodSeconds: 2
            seccessThreashold: 1
            failureThreashold: 5
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "b-${APP_NAME}"
        from:
          kind: ImageStream
          name: "b-${APP_NAME}-is"

#Application Service    
- kind: Service
  apiVersion: v1
  metadata:
    name: "b-${APP_NAME}-svc"
  spec:
    ports:
    - name: web
      port: ${PORT}
      targetPort: ${PORT}
    selector:
      name: "b-${APP_NAME}-dc"
#Route
- kind: Route
  apiVersion: v1
  metadata:
    name: "b-${APP_NAME}-rt"
  spec:
    to:
      kind: Service
      name: "b-${APP_NAME}-svc"

