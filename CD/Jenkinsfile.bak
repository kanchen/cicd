
properties([
  [$class: 'ParametersDefinitionProperty', parameterDefinitions: [
    [$class: 'StringParameterDefinition', defaultValue: 'docker.io/kchen', description: 'The docker registry', name: 'DOCKER_REGISTRY'],    
    [$class: 'StringParameterDefinition', defaultValue: 'hola', description: 'The application name', name: 'APP_NAME'],
    [$class: 'StringParameterDefinition', defaultValue: 'docker.io/kchen', description: 'The docker registry', name: 'DOCKER_REGISTRY'],
    [$class: 'StringParameterDefinition', defaultValue: '1.0', description: 'The docker image tag', name: 'IMAGE_TAG'],
    [$class: 'StringParameterDefinition', defaultValue: '512Mi', description: 'The memory limit allocated to the running application', name: 'MEMORY_LIMIT'],
    [$class: 'StringParameterDefinition', defaultValue: '9000', description: 'The TCP port application running', name: 'APP_PORT'],
    [$class: 'StringParameterDefinition', defaultValue: '/hola-mundo', description: 'The path to check for application liveness', name: 'LIVENESS_PATH'],
    [$class: 'StringParameterDefinition', defaultValue: '/hola-mundo', description: 'The path to check application readiness', name: 'READINESS_PATH']
  ]]
])

node('master') {
  def oc = "oc"
  def osHost = "ocpc.gitook.com:8443"
  def osCredentialId = 'OpenshiftCredentialId'
  def gitUrl = 'https://github.com/AceInfoSolutions/DHS-TICSII-TechChallenge.git'
  def gitCredentialId = '1986bca4-211f-498a-b26b-e0f1b5dc759a'
  def stageProject = "stage"
  def productionProject = "production"
  def stageTemplate = "CD/templates/stage-template.yaml"
  def productionTemplate = "CD/templates/ab-template.yaml"
  def green = "a"
  def blue = "b"
  def userInput
  def blueWeight
  def greenWeight
  def abDeployment = false

  stage ('Git Pull') {
    checkout([$class: 'GitSCM',
      branches: [[name: '*/master']],
      doGenerateSubmoduleConfigurations: false,
      extensions: [],
      submoduleCfg: [],
      userRemoteConfigs: [[credentialsId: gitCredentialId, url: gitUrl]]
    ])
  }

  stage ('Openshift Access') {
    withCredentials([
      [$class: 'UsernamePasswordMultiBinding', credentialsId: osCredentialId, usernameVariable: 'OS_USERNAME', passwordVariable: 'OS_PASSWORD']
    ]) {
      sh """
        ${oc} login ${osHost} --username=${env.OS_USERNAME} --password=${env.OS_PASSWORD} --insecure-skip-tls-verify
      """

      try {
        sh """
          ${oc} project ${stageProject}
        """         
      } catch (Exception e) {
        sh """
          ${oc} new-project ${stageProject}
        """                
      }

      try {
        sh """
          ${oc} project ${productionProject}
        """         
      } catch (Exception e) {
        sh """
          ${oc} new-project ${productionProject}
        """                
      }
    }
  }
  
  stage ('Deploy to Stage') {
    withCredentials([
      [$class: 'UsernamePasswordMultiBinding', credentialsId: osCredentialId, usernameVariable: 'OS_USERNAME', passwordVariable: 'OS_PASSWORD']
    ]) {
      sh """
        ${oc} login ${osHost} -n ${stageProject} --username=${env.OS_USERNAME} --password=${env.OS_PASSWORD} --insecure-skip-tls-verify
      """

      try {
        sh """
          ${oc} process -f ${stageTemplate} | sed 's/"9000"/9000/g' | oc replace --force  -f - -n ${stageProject}
        """         
      } catch (Exception e) {
        sh """
          ${oc} process -f ${stageTemplate} | sed 's/"9000"/9000/g' | oc create -f - -n ${stageProject}
        """                
      }

      sh """
        ${oc} tag --source=docker ${DOCKER_REGISTRY}/${APP_NAME}:${IMAGE_TAG} ${stageProject}/${APP_NAME}-is:latest --insecure
        sleep 5
        ${oc} import-image ${APP_NAME}-is --confirm --insecure
      """
    }
  }

  stage ('Production Deployment') {
    userInput = input(
       id: 'userInput', message: 'A/B deployment or Rolling deployment?', parameters: [
        [$class: 'ChoiceParameterDefinition', choices: 'A/B deployment\nRolling Deployment', description: 'A/B(inlcuding Blue/Green) Deployment or Rolling Deployment', name: 'DEPLOYMENT_TYPE'],
       ])
    withCredentials([
      [$class: 'UsernamePasswordMultiBinding', credentialsId: osCredentialId, usernameVariable: 'OS_USERNAME', passwordVariable: 'OS_PASSWORD']
    ]) {
      sh """
        ${oc} login ${osHost} -n ${productionProject} --username=${env.OS_USERNAME} --password=${env.OS_PASSWORD} --insecure-skip-tls-verify
      """

      try {
        sh """
          ${oc} process -f ${productionTemplate} | sed 's/"9000"/9000/g' | oc replace --force -f - -n ${productionProject}
        """         
      } catch (Exception e) {
        sh """
          ${oc} process -f ${productionTemplate} | sed 's/"9000"/9000/g' | oc create -f - -n ${productionProject}
        """                
      }

      sh """
        ${oc} get route ab-${APP_NAME}-rt -n ${productionProject} -o jsonpath='{ .spec.to.name }' > active_service.txt
        cat active_service.txt
      """
      activeService = readFile('active_service.txt').trim()
      if (activeService == "a-${APP_NAME}-svc") {
        blue = "a"
        green = "b"
      }

      if (userInput == "Rolling Deployment") {
        sh """
          ${oc} tag --source=docker ${DOCKER_REGISTRY}/${APP_NAME}:${IMAGE_TAG} ${productionProject}/${blue}-${APP_NAME}-is:latest --insecure
          sleep 5
          ${oc} import-image ${blue}-${APP_NAME}-is --confirm --insecure -n ${productionProject}
          ${oc} set -n ${productionProject} route-backends ab-${APP_NAME}-rt ${blue}-${APP_NAME}-svc=100 ${green}-${APP_NAME}-svc=0
        """
      } else {
        abDeployment = true
        sh """
          ${oc} tag --source=docker ${DOCKER_REGISTRY}/${APP_NAME}:${IMAGE_TAG} ${productionProject}/${green}-${APP_NAME}-is:latest --insecure
          sleep 5
          ${oc} import-image ${green}-${APP_NAME}-is --confirm --insecure -n ${productionProject}
        """
      }
    } 
  }
  if (abDeployment) {
    stage ('Production Canary Deployment') {
      userInput = input(
       id: 'userInput', message: 'Production Canary Deployment?', parameters: [
          [$class: 'StringParameterDefinition', defaultValue: '10', description: 'Green(Newly deployed) weight', name: 'GREEN_WEIGHT'],
          [$class: 'StringParameterDefinition', defaultValue: '90', description: 'Blue(Existing deployment) weight', name: 'BLUE_WEIGHT'],
         ])
      blueWeight = userInput['BLUE_WEIGHT']
      greenWeight = userInput['GREEN_WEIGHT']
      withCredentials([
        [$class: 'UsernamePasswordMultiBinding', credentialsId: osCredentialId, usernameVariable: 'OS_USERNAME', passwordVariable: 'OS_PASSWORD']
      ]) {
        sh """
          ${oc} login ${osHost} -n ${productionProject} --username=${env.OS_USERNAME} --password=${env.OS_PASSWORD} --insecure-skip-tls-verify
          ${oc} set -n ${productionProject} route-backends ab-${APP_NAME}-rt ${green}-${APP_NAME}-svc=${greenWeight} ${blue}-${APP_NAME}-svc=${blueWeight}
        """
      }
    }

    stage ('Production Go Live or Rollback') {
      userInput = input(
         id: 'userInput', message: 'Production Go Live or Rollback?', parameters: [
          [$class: 'ChoiceParameterDefinition', choices: 'Go Live\nRollback', description: 'Go Live to Green or Rollback to Blue', name: 'GO_LIVE_OR_ROLLBACK'],
         ])
      withCredentials([
        [$class: 'UsernamePasswordMultiBinding', credentialsId: osCredentialId, usernameVariable: 'OS_USERNAME', passwordVariable: 'OS_PASSWORD']
      ]) {
        sh """
          ${oc} login ${osHost} -n ${productionProject} --username=${env.OS_USERNAME} --password=${env.OS_PASSWORD} --insecure-skip-tls-verify
        """

        if (userInput == "Rollback") {
          sh """
            ${oc} set -n ${productionProject} route-backends ab-${APP_NAME}-rt ${blue}-${APP_NAME}-svc=100 ${green}-${APP_NAME}-svc=0
          """              
        } else {
          sh """
            ${oc} set -n ${productionProject} route-backends ab-${APP_NAME}-rt ${green}-${APP_NAME}-svc=100 ${blue}-${APP_NAME}-svc=0
          """                            
        }
      }
    }
  }
}
